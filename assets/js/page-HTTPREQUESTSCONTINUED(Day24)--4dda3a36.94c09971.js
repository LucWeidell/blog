(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{497:function(e,t,a){"use strict";a.r(t);var s=a(2),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"http-requests-continued-day-2-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-requests-continued-day-2-4"}},[e._v("#")]),e._v(" HTTP REQUESTS CONTINUED (Day 2/4)")]),e._v(" "),a("h2",{attrs:{id:"what-are-the-three-states-of-a-promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-three-states-of-a-promise"}},[e._v("#")]),e._v(" What are the three states of a Promise?")]),e._v(" "),a("p",[e._v("Pending, Resolved or  Rejected: then return to Pending")]),e._v(" "),a("h2",{attrs:{id:"how-do-promises-seek-to-resolve-the-issues-of-callback-hell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-do-promises-seek-to-resolve-the-issues-of-callback-hell"}},[e._v("#")]),e._v(' How do promises seek to resolve the issues of "callback hell"?')]),e._v(" "),a("p",[e._v("Promises guarantees the code that there will be a guaranteed response, pass or fail.\nIt also acts as the marker for when the code can continue versus writing a while statement or multiple timeouts.\nSimply allows chaining")]),e._v(" "),a("h2",{attrs:{id:"what-is-the-difference-between-then-and-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-the-difference-between-then-and-catch"}},[e._v("#")]),e._v(" What is the difference between .then() and .catch()?")]),e._v(" "),a("p",[e._v("Then: if promised resolved: code 200: do this\nCatch: If not 200: Throw error and do this: but dont break application")]),e._v(" "),a("h2",{attrs:{id:"afternoon-challenge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#afternoon-challenge"}},[e._v("#")]),e._v(" Afternoon Challenge:")]),e._v(" "),a("p",[e._v("https://github.com/LucWeidell/creglist-apis")])])}),[],!1,null,null,null);t.default=r.exports}}]);